import time
from algorithms.packing_algorithm import PackingAlgorithm, Box as OldBox
from algorithms.enhanced_packing_algorithm import EnhancedPackingAlgorithm, Box as EnhancedBox

def test_compare_algorithms():
    """So s√°nh hi·ªáu su·∫•t gi·ªØa thu·∫≠t to√°n c≈© v√† thu·∫≠t to√°n m·ªõi"""
    
    print("üîç So s√°nh hi·ªáu su·∫•t thu·∫≠t to√°n ƒë√≥ng g√≥i...")
    
    # T·∫°o d·ªØ li·ªáu test
    test_boxes = [
        # id, width, height, depth, name, label, weight
        ("1", 700, 960, 690, "Box 1", "1", 10),
        ("2", 700, 960, 690, "Box 2", "1", 10),
        ("3", 700, 960, 690, "Box 3", "1", 10),
        ("4", 700, 960, 690, "Box 4", "1", 10),
        ("5", 700, 960, 690, "Box 5", "1", 10),
        ("6", 500, 500, 500, "Box 6", "2", 8),
        ("7", 500, 500, 500, "Box 7", "2", 8),
        ("8", 500, 500, 500, "Box 8", "2", 8),
        ("9", 800, 400, 600, "Box 9", "3", 12),
        ("10", 800, 400, 600, "Box 10", "3", 12),
    ]
    
    container_dimensions = {
        "width": 2340,
        "height": 2694,
        "depth": 12117
    }
    
    print(f"‚úÖ T·∫°o {len(test_boxes)} boxes ƒë·ªÉ test")
    print(f"‚úÖ Container dimensions: {container_dimensions}")
    
    # T·∫°o danh s√°ch box cho thu·∫≠t to√°n c≈©
    old_goods = []
    for box_data in test_boxes:
        box = OldBox(
            id=box_data[0],
            width=box_data[1],
            height=box_data[2],
            depth=box_data[3],
            name=box_data[4],
            label=box_data[5],
            weight=box_data[6]
        )
        old_goods.append(box)
    
    # T·∫°o danh s√°ch box cho thu·∫≠t to√°n m·ªõi
    enhanced_goods = []
    for box_data in test_boxes:
        box = EnhancedBox(
            id=box_data[0],
            width=box_data[1],
            height=box_data[2],
            depth=box_data[3],
            name=box_data[4],
            label=box_data[5],
            weight=box_data[6]
        )
        enhanced_goods.append(box)
    
    # Test thu·∫≠t to√°n c≈©
    print("\nüìä Test thu·∫≠t to√°n c≈© (Best Fit)...")
    old_algo = PackingAlgorithm()
    old_algo.set_algorithm("best_fit")  # S·ª≠ d·ª•ng Best Fit
    
    old_start_time = time.time()
    old_boxes, old_util = old_algo.pack(old_goods, container_dimensions)
    old_time = time.time() - old_start_time
    
    print(f"‚úÖ Thu·∫≠t to√°n c≈© ƒë·∫∑t ƒë∆∞·ª£c {len(old_boxes)}/{len(old_goods)} boxes")
    print(f"‚úÖ T·ª∑ l·ªá s·ª≠ d·ª•ng: {old_util:.2%}")
    print(f"‚úÖ Th·ªùi gian th·ª±c thi: {old_time:.4f} gi√¢y")
    
    # Test thu·∫≠t to√°n m·ªõi (Extreme Point)
    print("\nüìä Test thu·∫≠t to√°n m·ªõi (Extreme Point + Layer-based)...")
    enhanced_algo = EnhancedPackingAlgorithm()
    
    enhanced_start_time = time.time()
    enhanced_boxes, enhanced_util = enhanced_algo.pack(enhanced_goods, container_dimensions)
    enhanced_time = time.time() - enhanced_start_time
    
    print(f"‚úÖ Thu·∫≠t to√°n m·ªõi ƒë·∫∑t ƒë∆∞·ª£c {len(enhanced_boxes)}/{len(enhanced_goods)} boxes")
    print(f"‚úÖ T·ª∑ l·ªá s·ª≠ d·ª•ng: {enhanced_util:.2%}")
    print(f"‚úÖ Th·ªùi gian th·ª±c thi: {enhanced_time:.4f} gi√¢y")
    
    # So s√°nh k·∫øt qu·∫£
    print("\nüèÜ So s√°nh k·∫øt qu·∫£:")
    print(f"- S·ªë l∆∞·ª£ng box ƒë·∫∑t ƒë∆∞·ª£c: {'Thu·∫≠t to√°n m·ªõi' if len(enhanced_boxes) > len(old_boxes) else 'Thu·∫≠t to√°n c≈©' if len(old_boxes) > len(enhanced_boxes) else 'C·∫£ hai'} t·ªët h∆°n")
    print(f"- T·ª∑ l·ªá s·ª≠ d·ª•ng: {'Thu·∫≠t to√°n m·ªõi' if enhanced_util > old_util else 'Thu·∫≠t to√°n c≈©' if old_util > enhanced_util else 'C·∫£ hai'} t·ªët h∆°n")
    print(f"- Th·ªùi gian th·ª±c thi: {'Thu·∫≠t to√°n m·ªõi' if enhanced_time < old_time else 'Thu·∫≠t to√°n c≈©' if old_time < enhanced_time else 'C·∫£ hai'} nhanh h∆°n")
    
    # Test thu·∫≠t to√°n m·ªõi v·ªõi t·ªëi ∆∞u h√≥a
    print("\nüìä Test thu·∫≠t to√°n m·ªõi v·ªõi t·ªëi ∆∞u h√≥a (nhi·ªÅu chi·∫øn l∆∞·ª£c)...")
    
    enhanced_opt_start_time = time.time()
    enhanced_opt_boxes, enhanced_opt_util = enhanced_algo.optimize_packing(
        enhanced_goods, container_dimensions, respect_groups=True, time_limit=10
    )
    enhanced_opt_time = time.time() - enhanced_opt_start_time
    
    print(f"‚úÖ Thu·∫≠t to√°n m·ªõi (t·ªëi ∆∞u) ƒë·∫∑t ƒë∆∞·ª£c {len(enhanced_opt_boxes)}/{len(enhanced_goods)} boxes")
    print(f"‚úÖ T·ª∑ l·ªá s·ª≠ d·ª•ng: {enhanced_opt_util:.2%}")
    print(f"‚úÖ Th·ªùi gian th·ª±c thi: {enhanced_opt_time:.4f} gi√¢y")
    
    print("\nüéâ Test ho√†n th√†nh!")

if __name__ == "__main__":
    test_compare_algorithms() 